(FPCore (x y z)
:name "gsl_sf_airy_Ai_deriv"
      :pre (and (and (<= -3.244644e2 x) (<= x -3.244643e2)) (and (<= 3.244643e2 y) (<= y 3.244644e2)) (and (<= 1.125791e-3 z) (<= z 1.125792e-3)))
          (cos (- 2.356194 (* (* x (sqrt y)) (- (+ -4.279246e-2 z) 6.250000e-1)))))

(FPCore (x y z)
:name "gsl_sf_airy_Bi_deriv"
      :pre (and (and (<= -4.056502e2 x) (<= x -4.056501e2)) (and (<= 4.056502e2 y) (<= y 4.056503e2)) (and (<= 1.125793e-3 z) (<= z 1.125794e-3)))
          (sin (- 2.356194 (* (* x (sqrt y)) (- (+ -4.279246e-2 z) 6.250000e-1)))))

(FPCore (x y z a b c)
:name "gsl_sf_bessel_J0"
      :pre (and (and (<= 2.002771e2 x) (<= x 2.002772e2)) (and (<= 3.895342e-7 y) (<= y 3.895348e-7)) (and (<= 3.246119e-8 z) (<= z 3.246123e-8)) (and (<= -1.802558e-3 a) (<= a -1.802558e-3)) (and (<= 6.492237e-8 b) (<= b 6.492246e-8)) (and (<= 10.000000e-1 c) (<= c 10.000000e-1)))
          (- (* (+ (sin x) (cos x)) (- 1.000000 (* (* y 5.000000e-1) (- 1.000000 z)))) (* (- (sin x) (cos x)) (* (/ (+ -1.231958e-1 a) x) (- 1.000000 (* b c))))))

(FPCore (x y z a b c)
:name "gsl_sf_bessel_J1"
      :pre (and (and (<= 9.675240e-15 x) (<= x 7.577989e-2)) (and (<= -2.536152e-1 y) (<= y -6.327610e-13)) (and (<= 1.670202 z) (<= z 1.670828)) (and (<= -7.071653e-3 a) (<= a -7.348890e-17)) (and (<= 0.000000 b) (<= b 2.338790e-4)) (and (<= 5.840000e-15 c) (<= c 5.012708e-2)))
          (+ (+ (* 5.000000e-1 -1.172614e-1) (- (* (+ x y) (/ z 2.000000)) (+ (- a b) c))) 2.500000e-1))

(FPCore (x y z a b c i j k)
:name "gsl_sf_bessel_Y0"
      :pre (and (and (<= -1.431568e-1 x) (<= x -2.106722e-17)) (and (<= -1.283452e-1 y) (<= y 2.366275e-2)) (and (<= 1.915202 z) (<= z 1.916884)) (and (<= 3.102498e-15 a) (<= a 3.819053e-2)) (and (<= -1.900006e-3 b) (<= b -1.100000e-17)) (and (<= -1.043788e-1 c) (<= c -1.881050e-13)) (and (<= 1.375581 i) (<= i 1.375795)) (and (<= -2.585863e-1 j) (<= j -2.585862e-1)) (and (<= 1.911156e-1 k) (<= k 1.911580e-1)))
          (+ (+ (- (* (+ x y) (/ z 2.000000)) (+ (- a b) c)) (* 5.000000e-1 -1.127784e-2)) (+ (* (* (- i 6.931472e-1) 6.366198e-1) (+ (* 1.002542e-1 5.000000e-1) (- j k))) 3.750000e-1)))

(FPCore (x y)
:name "gsl_sf_bessel_Y1"
     :pre (and (and (<= 3.061786e1 x) (<= x 3.061871e1)) (and (<= 3.748254e-1 y) (<= y 3.748254e-1)))
          (- (* (+ (sin x) (cos x)) (cos (/ y x))) (* (- (sin x) (cos x)) (sin (/ y x)))))

(FPCore (x y z a b c i)
:name "gsl_sf_clausen"
      :pre (and (and (<= 7.998206e-19 x) (<= x 2.135870e-3)) (and (<= 6.800000e-18 y) (<= y 7.233243e-2)) (and (<= 1.999552 z) (<= z 2.000000)) (and (<= 1.519623e-17 a) (<= a 7.063723e-5)) (and (<= 4.000000e-19 b) (<= b 1.467522e-6)) (and (<= 1.100000e-16 c) (<= c 1.016425e-3)) (and (<= 3.141417 i) (<= i 3.141593)))
          (- (+ (- (* (+ x y) (/ z 2.000000)) (+ (- a b) c)) (* 5.000000e-1 2.142694)) (log i)))

(FPCore (x y z a b c i)
:name "gsl_sf_expint_Ei"
      :pre (and (and (<= 3.724672e-1 x) (<= x 3.725701e-1)) (and (<= 7.419396e-17 y) (<= y 8.921106e-2)) (and (<= 3.062910e-15 z) (<= z 4.272399e-2)) (and (<= -7.451401e-1 a) (<= a -7.449344e-1)) (and (<= -1.145008e-2 b) (<= b -2.346543e-18)) (and (<= -1.422331e-3 c) (<= c 0.000000)) (and (<= -1.303182e-1 i) (<= i -1.014800e-16)))
          (+ (+ (- (* (+ y z) (/ a 2.000000)) (+ (- b c) i)) (* 5.000000e-1 -3.739021e-2)) (+ (- x) (- (- (log x)) 6.875000e-1))))

(FPCore (x)
:name "gsl_sf_legendre_P2"
      :pre (and (<= -5.776321e-1 x) (<= x -5.772093e-1))
          (- (* x (* 3.000000 x)) 1.000000))


(FPCore (x)
:name "gsl_sf_legendre_P3"
      :pre (and (<= 7.745560e-1 x) (<= x 7.746374e-1))
          (- (* (* 5.000000 x) x) 3.000000))

(FPCore (x)
:name "gsl_sf_legendre_Q1"
      :pre (and (<= 8.334323e-1 x) (<= x 8.337524e-1))
          (- (* (log (/ (+ x 1.000000) (- 1.000000 x))) (* x 5.000000e-1)) 1.000000))


(FPCore (x y z a b c)
:name "gsl_sf_psi"
      :pre (and (and (<= -1.829874e3 x) (<= x -1.829874e3)) (and (<= 1.829874e3 y) (<= y 1.829874e3)) (and (<= -1.029620e-2 z) (<= z -1.029620e-2)) (and (<= -9.999976e-1 a) (<= a -9.999976e-1)) (and (<= 0.000000 b) (<= b 2.772536e-6)) (and (<= 2.000000e-16 c) (<= c 5.597187e-5)))
          (- (+ (- (log y) (/ 5.000000e-1 x)) (+ (- (* z a) (+ b c)) (* 5.000000e-1 -2.047490e-2))) (/ (* (cos (* 3.141593 x)) 3.141593) (sin (* 3.141593 x)))))

(FPCore (x y z a b c)
:name "gsl_sf_Chi"
      :pre (and (and (<= -4.132590e-2 x) (<= x -4.046954e-2)) (and (<= 5.147119e-2 y) (<= y 6.769367e-2)) (and (<= -5.240469e-1 z) (<= z 5.240469e-1)) (and (<= -9.398266e-2 a) (<= a -4.774850e-2)) (and (<= -1.454539e-1 b) (<= b -1.154316e-1)) (and (<= -5.240469e-1 c) (<= c 5.240469e-1)))
          (- (- (+ (+ y -1.869511e-2) (+ z x))) (+ (+ (- a b) (* 5.000000e-1 -3.739021e-2)) (+ c x))))


(FPCore (x y z a b c i)
:name "gsl_sf_Ci"
      :pre (and (and (<= 1.673152e-18 x) (<= x 1.711883e-1)) (and (<= -1.033022 y) (<= y -2.891200e-16)) (and (<= 8.624493e-1 z) (<= z 8.638895e-1)) (and (<= -1.573672e-2 a) (<= a -2.479083e-16)) (and (<= 1.940000e-18 b) (<= b 1.071781e-3)) (and (<= 3.622653e-14 c) (<= c 1.938822e-1)) (and (<= 3.383755 i) (<= i 3.384606)))
          (+ (+ (- (* (+ x y) (/ z 2.000000)) (+ (- a b) c)) (* -3.400428e-1 5.000000e-1)) (- (log i) 5.000000e-1)))


(FPCore (x y)
:name "gsl_sf_lnsinh"
      :pre (and (and (<= 8.812235e-1 x) (<= x 8.815462e-1)) (and (<= 6.592241e-3 y) (<= y 6.597159e-3)))
          (log (* (+ (* (+ y 1.666667e-1) (* x x)) 1.000000) x)))


(FPCore (x)
:name "gsl_sf_zeta"
      :pre (and (<= -4.000000 x) (<= x -3.999761))
          (sin (* (fmod x 4.000000) 1.570796)))



(FPCore (x)
:name "gsl_sf_eta"
      :pre (and (<= -2.000072 x) (<= x -1.999928))
          (sin (* (fmod x 4.000000) 1.570796)))


(FPCore (x)
:name "gsl_sf_psi_1"
      :pre (and (<= -8.003458 x) (<= x -7.996512))
          (sin (* x 3.141593)))


