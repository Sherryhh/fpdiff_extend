(FPCore (x y z)
:name "gsl_sf_airy_Ai_deriv"
      :pre (and (and (<= -3.244645e2 x) (<= x -3.244641e2)) (and (<= 3.244641e2 y) (<= y 3.244645e2)) (and (<= 1.125791e-3 z) (<= z 1.125791e-3)))
          (cos (- 2.356194 (* (* x (sqrt y)) (- (+ -4.279246e-2 z) 6.250000e-1)))))

(FPCore (x y z)
:name "gsl_sf_airy_Bi_deriv"
      :pre (and (and (<= -4.056503e2 x) (<= x -4.056501e2)) (and (<= 4.056501e2 y) (<= y 4.056503e2)) (and (<= 1.125793e-3 z) (<= z 1.125793e-3)))
          (sin (- 2.356194 (* (* x (sqrt y)) (- (+ -4.279246e-2 z) 6.250000e-1)))))


(FPCore (x y z a b c)
:name "gsl_sf_bessel_J0"
      :pre (and (and (<= 2.002750e2 x) (<= x 2.002793e2)) (and (<= 3.895261e-7 y) (<= y 3.895429e-7)) (and (<= 3.246051e-8 z) (<= z 3.246191e-8)) (and (<= -1.802558e-3 a) (<= a -1.802558e-3)) (and (<= 6.492101e-8 b) (<= b 6.492382e-8)) (and (<= 10.000000e-1 c) (<= c 10.000000e-1)))
          (- (* (+ (sin x) (cos x)) (- 1.000000 (* (* y 5.000000e-1) (- 1.000000 z)))) (* (- (sin x) (cos x)) (* (/ (+ -1.231958e-1 a) x) (- 1.000000 (* b c))))))

(FPCore (x y z a b c)
:name "gsl_sf_bessel_J1"
      :pre (and (and (<= 9.571360e-15 x) (<= x 7.644016e-2)) (and (<= -2.536152e-1 y) (<= y -6.327610e-13)) (and (<= 1.651958 z) (<= z 1.689121)) (and (<= -7.142274e-3 a) (<= a -7.268615e-17)) (and (<= 0.000000 b) (<= b 2.340248e-4)) (and (<= 5.840000e-15 c) (<= c 5.012708e-2)))
          (+ (+ (* 5.000000e-1 -1.172614e-1) (- (* (+ x y) (/ z 2.000000)) (+ (- a b) c))) 2.500000e-1))

(FPCore (x y z a b c i j k)
:name "gsl_sf_bessel_Y0"
      :pre (and (and (<= -1.453656e-1 x) (<= x -2.060412e-17)) (and (<= -1.283452e-1 y) (<= y 2.366275e-2)) (and (<= 1.873101 z) (<= z 1.990787)) (and (<= 3.035166e-15 a) (<= a 3.941065e-2)) (and (<= -1.903873e-3 b) (<= b -1.100000e-17)) (and (<= -1.043788e-1 c) (<= c -1.881050e-13)) (and (<= 1.370175 i) (<= i 1.385141)) (and (<= -2.585863e-1 j) (<= j -2.583171e-1)) (and (<= 1.892601e-1 k) (<= k 1.922240e-1)))
          (+ (+ (- (* (+ x y) (/ z 2.000000)) (+ (- a b) c)) (* 5.000000e-1 -1.127784e-2)) (+ (* (* (- i 6.931472e-1) 6.366198e-1) (+ (* 1.002542e-1 5.000000e-1) (- j k))) 3.750000e-1)))

(FPCore (x y)
:name "gsl_sf_bessel_Y1"
     :pre (and (and (<= 3.060474e1 x) (<= x 3.063184e1)) (and (<= 3.748253e-1 y) (<= y 3.748256e-1)))
          (- (* (+ (sin x) (cos x)) (cos (/ y x))) (* (- (sin x) (cos x)) (sin (/ y x)))))

(FPCore (x y z a b c i)
:name "gsl_sf_clausen"
      :pre (and (and (<= 7.885399e-19 x) (<= x 2.135870e-3)) (and (<= 6.800000e-18 y) (<= y 7.233243e-2)) (and (<= 1.971350 z) (<= z 2.000000)) (and (<= 1.495967e-17 a) (<= a 7.063723e-5)) (and (<= 4.000000e-19 b) (<= b 1.467522e-6)) (and (<= 1.100000e-16 c) (<= c 1.016425e-3)) (and (<= 3.130322 i) (<= i 3.141593)))
          (- (+ (- (* (+ x y) (/ z 2.000000)) (+ (- a b) c)) (* 5.000000e-1 2.142694)) (log i)))


(FPCore (x y z a b c i)
:name "gsl_sf_expint_Ei"
      :pre (and (and (<= 3.705056e-1 x) (<= x 3.745159e-1)) (and (<= 7.377748e-17 y) (<= y 8.979914e-2)) (and (<= 3.062910e-15 z) (<= z 4.272399e-2)) (and (<= -7.490319e-1 a) (<= a -7.410113e-1)) (and (<= -1.151426e-2 b) (<= b -2.334186e-18)) (and (<= -1.422791e-3 c) (<= c 0.000000)) (and (<= -1.303182e-1 i) (<= i -1.014800e-16)))
          (+ (+ (- (* (+ y z) (/ a 2.000000)) (+ (- b c) i)) (* 5.000000e-1 -3.739021e-2)) (+ (- x) (- (- (log x)) 6.875000e-1))))

(FPCore (x)
:name "gsl_sf_legendre_P2"
      :pre (and (<= -5.863003e-1 x) (<= x -5.728220e-1))
          (- (* x (* 3.000000 x)) 1.000000))


(FPCore (x)
:name "gsl_sf_legendre_P3"
      :pre (and (<= 7.719793e-1 x) (<= x 7.771878e-1))
          (- (* (* 5.000000 x) x) 3.000000))

(FPCore (x)
:name "gsl_sf_legendre_Q1"
      :pre (and (<= 8.295383e-1 x) (<= x 8.374885e-1))
          (- (* (log (/ (+ x 1.000000) (- 1.000000 x))) (* x 5.000000e-1)) 1.000000))


(FPCore (x y z a b c)
:name "gsl_sf_psi"
      :pre (and (and (<= -1.829878e3 x) (<= x -1.829870e3)) (and (<= 1.829870e3 y) (<= y 1.829878e3)) (and (<= -1.029620e-2 z) (<= z -1.029620e-2)) (and (<= -9.999976e-1 a) (<= a -9.999976e-1)) (and (<= 0.000000 b) (<= b 2.772536e-6)) (and (<= 2.000000e-16 c) (<= c 5.597187e-5)))
          (- (+ (- (log y) (/ 5.000000e-1 x)) (+ (- (* z a) (+ b c)) (* 5.000000e-1 -2.047490e-2))) (/ (* (cos (* 3.141593 x)) 3.141593) (sin (* 3.141593 x)))))

(FPCore (x y z a b c)
:name "gsl_sf_Chi"
      :pre (and (and (<= -5.457577e-2 x) (<= x -2.717245e-2)) (and (<= 4.925558e-2 y) (<= y 6.921719e-2)) (and (<= -5.310367e-1 z) (<= z 5.310367e-1)) (and (<= -9.644137e-2 a) (<= a -4.638769e-2)) (and (<= -1.456969e-1 b) (<= b -1.152676e-1)) (and (<= -5.310367e-1 c) (<= c 5.310367e-1)))
          (- (- (+ (+ y -1.869511e-2) (+ z x))) (+ (+ (- a b) (* 5.000000e-1 -3.739021e-2)) (+ c x))))


(FPCore (x y z a b c i)
:name "gsl_sf_Ci"
      :pre (and (and (<= 1.511918e-18 x) (<= x 1.791759e-1)) (and (<= -1.033022 y) (<= y -2.891200e-16)) (and (<= 7.793389e-1 z) (<= z 9.137201e-1)) (and (<= -1.659734e-2 a) (<= a -2.241442e-16)) (and (<= 1.940000e-18 b) (<= b 1.075087e-3)) (and (<= 3.622653e-14 c) (<= c 1.938822e-1)) (and (<= 3.334270 i) (<= i 3.413924)))
          (+ (+ (- (* (+ x y) (/ z 2.000000)) (+ (- a b) c)) (* -3.400428e-1 5.000000e-1)) (- (log i) 5.000000e-1)))


(FPCore (x y)
:name "gsl_sf_lnsinh"
      :pre (and (and (<= 8.704031e-1 x) (<= x 8.924652e-1)) (and (<= 6.428434e-3 y) (<= y 6.764727e-3)))
          (log (* (+ (* (+ y 1.666667e-1) (* x x)) 1.000000) x)))


(FPCore (x)
:name "gsl_sf_zeta"
      :pre (and (<= -4.000000 x) (<= x -3.992376))
          (sin (* (fmod x 4.000000) 1.570796)))



(FPCore (x)
:name "gsl_sf_eta"
      :pre (and (<= -2.001146 x) (<= x -1.998855))
          (sin (* (fmod x 4.000000) 1.570796)))


(FPCore (x)
:name "gsl_sf_psi_1"
      :pre (and (<= -8.144932 x) (<= x -7.854764))
          (sin (* x 3.141593)))


